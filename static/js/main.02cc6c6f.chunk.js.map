{"version":3,"sources":["components/MainComponent.js","App.js","serviceWorker.js","index.js"],"names":["marked","setOptions","breaks","MainComponent","props","handleChange","event","setState","data","target","value","rawMarkup","__html","state","sanitize","bind","style","backgroundImage","backgroundPosition","backgroundSize","backgroundRepeat","width","className","fontFamily","flex","fontSize","textShadow","color","textAlign","display","justifyContent","height","id","this","marginTop","onChange","placeItems","background","dangerouslySetInnerHTML","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0PA6BAA,IAAOC,WAAW,CAChBC,QAAQ,IAIVF,IAAOC,WAAW,CAChBC,QAAQ,I,IA+CKC,E,kDA3CX,WAAYC,GAAO,IAAD,8BACd,cAAMA,IAQVC,aAAa,SAACC,GACV,EAAKC,SAAS,CAACC,KAAKF,EAAMG,OAAOC,SAVnB,EAYlBC,UAAU,WAEN,MAAO,CAACC,OADQZ,IAAO,EAAKa,MAAML,KAAK,CAACM,UAAS,MAXjD,EAAKD,MAAM,CACPL,KAvCS,2tBAyCb,EAAKH,aAAa,EAAKA,aAAaU,KAAlB,gBAClB,EAAKJ,UAAU,EAAKA,UAAUI,KAAf,gBAND,E,qDAiBd,OACI,yBAAKC,MAAO,CAACC,gBAAiB,kDAC1BC,mBAAoB,SAASC,eAAgB,QAC7CC,iBAAkB,YAAYC,MAAM,QACpCC,UAAU,mBAEV,yBAAKA,UAAU,OACX,wBAAIA,UAAU,SAASN,MAAO,CAACO,WAAW,YAAYC,KAAK,EAAEC,SAAS,SAASC,WAAW,eAAeC,MAAM,OAAOC,UAAU,WAAhI,uBAEJ,yBAAKN,UAAU,MAAMN,MAAO,CAACO,WAAY,UAAUM,QAAQ,OAAOC,eAAe,WAC7E,yBAAKR,UAAU,kBAAkBN,MAAO,CAACK,MAAM,OAAOU,OAAO,OAAOF,QAAQ,OAAOC,eAAe,WAC9F,8BAAUE,GAAG,SAAStB,MAAOuB,KAAKpB,MAAML,KACpCQ,MAAO,CAACe,OAAO,OAAOV,MAAM,MAAMa,UAAU,IAC5CC,SAAUF,KAAK5B,gBAEvB,yBAAKiB,UAAU,8BAA8BN,MAAO,CAACoB,WAAW,SAASP,QAAQ,OAAOC,eAAe,WACnG,yBAAKE,GAAG,UAAUhB,MAAO,CAACqB,WAAY,OAAOV,MAAO,QAChDN,MAAM,OAAQiB,wBAAyBL,KAAKtB,qB,GAnC5C4B,aC3BbC,MARf,WACE,OACE,yBAAKlB,UAAU,OACb,kBAAC,EAAD,QCMcmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.02cc6c6f.chunk.js","sourcesContent":["import 'bootstrap/dist/css/bootstrap.css';\nimport React, { Component } from 'react';\nimport marked from 'marked';\nconst defaultMarkdown = `# React Markdown Previewer\n\n## Type your Markdown in the Editor!\n\n### Main functionality\n\n- Preview window updates real time with markdown syntax\n- The editor has some predefined input on page load\n- BONUS: Use &lt;br&gt; for line breaks\n\n\n\\`Is the syntax highlighting even working?\\`\n\\`\\`\\`javascript\nlet s = \"JavaScript syntax highlighting\";\nalert(s);\n\\`\\`\\`\n\n> “If you are distressed by anything external, the pain is not due to the thing itself, but to your estimate of it; and this you have the power to revoke at any moment.”\n― Marcus Aurelius, Meditations \n\n![react logo](https://i.postimg.cc/Bv9y8sBZ/react-logo.png)\n\nCoded by **Swapnil**, [Github](https://www.github.com/swapnilkusumwal)\n`;\n\n// Line breaks allowed \nmarked.setOptions({\n  breaks: true,\n});\n\n// Line breaks allowed \nmarked.setOptions({\n  breaks: true,\n});\n\nclass MainComponent extends Component {\n    constructor(props){\n        super(props);\n        this.state={\n            data:defaultMarkdown\n        };\n        this.handleChange=this.handleChange.bind(this);\n        this.rawMarkup=this.rawMarkup.bind(this);\n    }\n    \n    handleChange=(event)=>{\n        this.setState({data:event.target.value});\n    }\n    rawMarkup=()=>{\n        const rawMarkup=marked(this.state.data,{sanitize:true});\n        return {__html:rawMarkup};\n    }\n    render() {\n        return (\n            <div style={{backgroundImage: \"url(https://i.postimg.cc/3xpfQV5s/noise-bg.png)\",\n                backgroundPosition: 'center',backgroundSize: 'cover',\n                backgroundRepeat: 'no-repeat',width:\"100%\"}}\n                className=\"container-fluid\"\n                >\n                <div className=\"row\">\n                    <h1 className=\"col-12\" style={{fontFamily:'monospace',flex:1,fontSize:'4.5rem',textShadow:'5px 5px #333',color:'#eee',textAlign:'center'}} >Markdown Previewer</h1>\n                </div>\n                <div className=\"row\" style={{fontFamily: 'Molengo',display:'flex',justifyContent:'center'}}>\n                    <div className=\"col-12 col-lg-6\" style={{width:'50vw',height:'90vh',display:'flex',justifyContent:'center'}}>\n                        <textarea id=\"editor\" value={this.state.data}\n                            style={{height:'80vh',width:'80%',marginTop:35}}\n                            onChange={this.handleChange}/>\n                    </div>\n                    <div className=\"col-12 col-lg-6 text-center\" style={{placeItems:'center',display:'flex',justifyContent:'center'}} >\n                        <div id=\"preview\" style={{background: '#333',color: 'white',\n                            width:'80%'}} dangerouslySetInnerHTML={this.rawMarkup()}/>  \n                    </div>\n                    \n                </div>\n            </div>\n        );\n    }\n}\n\nexport default MainComponent;","import React from 'react'; \n// import './App.css';\nimport MainComponent from './components/MainComponent';\nfunction App() {\n  return (\n    <div className=\"App\">\n      <MainComponent/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}